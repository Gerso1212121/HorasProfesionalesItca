import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:developer' as developer;
import 'dart:convert';

class DebugHelper {
  static Future<void> diagnosticarProblemas() async {
    developer.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO...');

    // 1. Verificar autenticaci√≥n de Firebase
    await _verificarAutenticacion();

    // 2. Verificar conexi√≥n a Firestore
    await _verificarFirestore();

    // 3. Verificar almacenamiento local
    await _verificarAlmacenamientoLocal();

    // 4. Verificar configuraci√≥n de la aplicaci√≥n
    await _verificarConfiguracion();

    developer.log('‚úÖ DIAGN√ìSTICO COMPLETADO');
  }

  static Future<void> _verificarAutenticacion() async {
    developer.log('üîê Verificando autenticaci√≥n...');

    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        developer.log('‚úÖ Usuario autenticado: ${user.email}');
        developer.log('üÜî UID: ${user.uid}');
        developer.log('üìß Email verificado: ${user.emailVerified}');
      } else {
        developer.log('‚ùå No hay usuario autenticado');
      }
    } catch (e) {
      developer.log('‚ùå Error verificando autenticaci√≥n: $e');
    }
  }

  static Future<void> _verificarFirestore() async {
    developer.log('üî• Verificando conexi√≥n a Firestore...');

    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        // Intentar leer una colecci√≥n de prueba
        final testDoc = await FirebaseFirestore.instance
            .collection('usuarios')
            .doc(user.uid)
            .get();

        if (testDoc.exists) {
          developer.log('‚úÖ Documento de usuario existe en Firestore');
        } else {
          developer.log('‚ö†Ô∏è Documento de usuario no existe, creando...');
          await FirebaseFirestore.instance
              .collection('usuarios')
              .doc(user.uid)
              .set({
            'email': user.email,
            'fecha_creacion': DateTime.now().toIso8601String(),
            'ultima_actividad': DateTime.now().toIso8601String(),
          });
          developer.log('‚úÖ Documento de usuario creado');
        }

        // Verificar permisos de escritura
        await FirebaseFirestore.instance
            .collection('usuarios')
            .doc(user.uid)
            .collection('test')
            .doc('test')
            .set({'test': true});

        developer.log('‚úÖ Permisos de escritura verificados');

        // Limpiar documento de prueba
        await FirebaseFirestore.instance
            .collection('usuarios')
            .doc(user.uid)
            .collection('test')
            .doc('test')
            .delete();
      } else {
        developer
            .log('‚ùå No se puede verificar Firestore sin usuario autenticado');
      }
    } catch (e) {
      developer.log('‚ùå Error verificando Firestore: $e');
      if (e.toString().contains('permission-denied')) {
        developer.log('‚ö†Ô∏è Problema de permisos en Firestore');
      }
    }
  }

  static Future<void> _verificarAlmacenamientoLocal() async {
    developer.log('üì± Verificando almacenamiento local...');

    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();

      developer.log('üìä Total de claves en SharedPreferences: ${keys.length}');

      // Buscar sesiones locales
      final sesionKeys =
          keys.where((key) => key.contains('sesion_chat_')).toList();
      developer.log('üí¨ Sesiones locales encontradas: ${sesionKeys.length}');

      for (final key in sesionKeys.take(3)) {
        final data = prefs.getString(key);
        if (data != null) {
          try {
            final sesion = json.decode(data);
            developer.log(
                'üìù Sesi√≥n local: ${sesion['fecha']} - ${sesion['mensajes']?.length ?? 0} mensajes');
          } catch (e) {
            developer.log('‚ùå Error parseando sesi√≥n local: $e');
          }
        }
      }
    } catch (e) {
      developer.log('‚ùå Error verificando almacenamiento local: $e');
    }
  }

  static Future<void> _verificarConfiguracion() async {
    developer.log('‚öôÔ∏è Verificando configuraci√≥n...');

    try {
      final prefs = await SharedPreferences.getInstance();

      // Verificar configuraci√≥n de IA
      final comportamiento = prefs.getString('comportamiento_ia');
      final reglas = prefs.getString('reglas_ia');

      developer
          .log('ü§ñ Comportamiento IA configurado: ${comportamiento != null}');
      developer.log('üìã Reglas IA configuradas: ${reglas != null}');

      if (comportamiento == null || reglas == null) {
        developer.log(
            '‚ö†Ô∏è Configuraci√≥n de IA incompleta, estableciendo valores por defecto...');

        await prefs.setString('comportamiento_ia',
            'Eres un asistente psicol√≥gico emp√°tico y profesional que:\n- Utiliza un tono c√°lido y comprensivo\n- Proporciona respuestas basadas en la psicolog√≠a cient√≠fica\n- Ofrece herramientas pr√°cticas para el desarrollo emocional\n- Mantiene un enfoque √©tico y profesional\n- Adapta su comunicaci√≥n seg√∫n las necesidades del usuario\n- Utiliza la base de conocimiento de libros de psicolog√≠a para fundamentar sus respuestas');

        await prefs.setString('reglas_ia',
            '1. Siempre prioriza el bienestar emocional del usuario\n2. No proporcionar diagn√≥sticos m√©dicos o psicol√≥gicos\n3. Recomendar buscar ayuda profesional cuando sea necesario\n4. Mantener confidencialidad y respeto\n5. Usar lenguaje claro y accesible\n6. Basar respuestas en evidencia cient√≠fica de los libros de psicolog√≠a\n7. Fomentar la autoconciencia y el desarrollo personal\n8. Utilizar conceptos de inteligencia emocional de Daniel Goleman\n9. Referenciar t√©cnicas psicol√≥gicas cuando sea apropiado');

        developer.log('‚úÖ Configuraci√≥n de IA establecida por defecto');
      }
    } catch (e) {
      developer.log('‚ùå Error verificando configuraci√≥n: $e');
    }
  }

  static Future<void> limpiarDatosCorruptos() async {
    developer.log('üßπ Limpiando datos corruptos...');

    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();

      // Limpiar sesiones corruptas
      final sesionKeys =
          keys.where((key) => key.contains('sesion_chat_')).toList();

      for (final key in sesionKeys) {
        final data = prefs.getString(key);
        if (data != null) {
          try {
            json.decode(data); // Verificar si es JSON v√°lido
          } catch (e) {
            developer.log('üóëÔ∏è Eliminando sesi√≥n corrupta: $key');
            await prefs.remove(key);
          }
        }
      }

      developer.log('‚úÖ Limpieza de datos corruptos completada');
    } catch (e) {
      developer.log('‚ùå Error limpiando datos corruptos: $e');
    }
  }

  static Future<void> forzarReconexion() async {
    developer.log('üîÑ Forzando reconexi√≥n...');

    try {
      // Cerrar sesi√≥n actual
      await FirebaseAuth.instance.signOut();
      developer.log('‚úÖ Sesi√≥n cerrada');

      // Esperar un momento
      await Future.delayed(Duration(seconds: 2));

      // Verificar si hay usuario en SharedPreferences para reconectar
      final prefs = await SharedPreferences.getInstance();
      final email = prefs.getString('last_user_email');

      if (email != null) {
        developer.log('üìß Intentando reconectar con: $email');
        // Aqu√≠ podr√≠as implementar la reconexi√≥n autom√°tica si es necesario
      }

      developer.log('‚úÖ Reconexi√≥n forzada completada');
    } catch (e) {
      developer.log('‚ùå Error en reconexi√≥n forzada: $e');
    }
  }
}
